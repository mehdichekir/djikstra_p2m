import requests

GRAPH_HOPPER_API_KEY = "7e0b1616-f9ec-4770-b408-512d07ba1bea"

def chunk_list(lst, chunk_size):
    """Divides a list into sublists of maximum size chunk_size."""
    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]

def get_graphhopper_route(path_chunk):
    """
    Requests a route segment from GraphHopper.
    Assumes each point in path_chunk is [lon, lat] and converts to "lat,lon".
    """
    base_url = "https://graphhopper.com/api/1/route"
    # For each point in path_chunk, swap order to lat,lon
    points = "&".join([f"point={lat},{lon}" for lon, lat in path_chunk])
    url = f"{base_url}?{points}&vehicle=car&locale=en&key={GRAPH_HOPPER_API_KEY}&points_encoded=false"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()["paths"][0]["points"]["coordinates"]
    else:
        print("GraphHopper request failed:", response.text)
        return []

def get_full_route(path_geom):
    """
    Divides path_geom into chunks of 20 points (adjustable) and merges the results.
    Each chunk is processed separately, and duplicate connecting points are removed.
    """
    # Change chunk size to 20 if desired; here, you had 5 in your example
    chunks = chunk_list(path_geom, 20)
    full_route = []
    for chunk in chunks:
        route_segment = get_graphhopper_route(chunk)
        if route_segment:
            if full_route:
                # Remove the first point of the segment to avoid duplicate
                route_segment = route_segment[1:]
            full_route.extend(route_segment)
    return full_route

# Example input: each sublist is [longitude, latitude]
path_geom = [
    [9.9868349, 35.7919282], [9.9403287, 35.7887617], [9.9224509, 35.9565809],
    [9.9262264, 35.9591746], [9.9250586, 35.9618515], [9.9250576, 35.962016],
    [9.9251771, 35.9641138], [9.9251032, 35.9650889], [9.9221946, 35.9727091],
    [9.9206716, 35.9761158], [9.8965441, 36.0759202], [9.8866524, 36.0810952],
    [9.8826242, 36.0853291], [9.8811116, 36.0883052], [9.880171, 36.0895188],
    [9.879826, 36.0899629], [9.879783, 36.0900175], [9.8793567, 36.0905579],
    [9.8790346, 36.0909026], [9.8783404, 36.0912188], [9.8773071, 36.0911548],
    [9.8764343, 36.0910648], [9.8757959, 36.0908835], [9.8749123, 36.0902831],
    [9.8740474, 36.0896778], [9.8729983, 36.089338], [9.8716058, 36.089149],
    [9.8713308, 36.0890334], [9.8009413, 36.090903], [9.8013114, 36.0896907],
    [9.8012115, 36.0891188], [9.800952, 36.0886295], [9.8004233, 36.0883066],
    [9.7996739, 36.0879097], [9.79844, 36.0871063], [9.7234258, 36.1113879],
    [9.594685, 35.9429355], [9.584646, 35.927663], [9.5791472, 35.9241048],
    [9.576993, 35.9221594], [9.5639147, 35.9190083], [9.5408234, 35.9039259],
    [9.5328822, 35.8950763], [9.5301932, 35.8941252], [9.5254795, 35.8836901],
    [9.5093851, 35.8666365], [9.5083338, 35.866493], [9.5081082, 35.866462],
    [9.5056765, 35.8648863], [9.5048183, 35.864521], [9.5048003, 35.8643768],
    [9.5046829, 35.864109], [9.5044721, 35.8634315], [9.5042672, 35.8628931],
    [9.5041868, 35.8627011], [9.503967, 35.8623501], [9.503071, 35.8618951],
    [9.5015198, 35.8612169], [9.5014832, 35.8612034], [9.4993961, 35.8593292],
    [9.4556719, 35.8310444], [9.4548881, 35.7510893], [9.4463311, 35.7189455],
    [9.3846606, 35.6798065], [9.4069429, 35.6177136], [9.4118083, 35.6077353],
    [9.41803, 35.6023338], [9.4182129, 35.5980133], [9.428872, 35.5936776],
    [9.4929386, 35.5200599], [9.4930671, 35.5184855], [9.4936557, 35.5171388],
    [9.4940145, 35.5165589], [9.4944636, 35.5158579], [9.4951881, 35.5145384],
    [9.4952898, 35.5144189], [9.4975809, 35.5120631], [9.4993057, 35.5113352],
    [9.4996762, 35.5110496], [9.4997023, 35.5110294], [9.5006539, 35.5102284],
    [9.5018823, 35.5095558], [9.5017263, 35.5090118], [9.5023094, 35.5084961],
    [9.5029861, 35.5047212], [9.5025035, 35.5034961], [9.502078, 35.5031739],
    [9.5026305, 35.5012939], [9.5019574, 35.5002757], [9.501885, 35.5003083],
    [9.5017069, 35.4999457], [9.502316, 35.4995855], [9.5020949, 35.4992399],
    [9.5025146, 35.498849], [9.5025938, 35.4978726], [9.5014314, 35.4970889],
    [9.501121, 35.4969173], [9.5008169, 35.4969982], [9.498367, 35.4954806],
    [9.4975872, 35.4925097], [9.4970846, 35.4871975], [9.5032483, 35.4824408],
    [9.5029028, 35.4794649], [9.5027989, 35.4789505], [9.4991818, 35.4722028],
    [9.4977046, 35.4692368], [9.494757, 35.4655926], [9.4934902, 35.4637761],
    [9.4992176, 35.4241383], [9.4994558, 35.4184948], [9.4931967, 35.4047941],
    [9.4916147, 35.4032169], [9.4911861, 35.4024284], [9.479907, 35.3948112],
    [9.4795232, 35.3897664], [9.4841755, 35.3738414], [9.4766028, 35.355967],
    [9.471277, 35.3458334], [9.4635134, 35.3330788], [9.4608088, 35.3291788],
    [9.4552668, 35.3252377], [9.4548048, 35.3248651], [9.4532816, 35.3220435],
    [9.4527506, 35.3208747], [9.4521507, 35.3198555], [9.452663, 35.319326],
    [9.4527169, 35.31902], [9.4526311, 35.3188491], [9.452377, 35.3174824],
    [9.4525391, 35.316651], [9.4522337, 35.3160671], [9.4541393, 35.3151003],
    [9.4547284, 35.3144546], [9.4575975, 35.311511], [9.4629218, 35.2887043],
    [9.4615066, 35.2870749], [9.465091, 35.2749833], [9.4512882, 35.2317942],
    [9.4512262, 35.2253118], [9.4641666, 35.2039502], [9.4647567, 35.2037716],
    [9.4653527, 35.2035912], [9.465702, 35.2034547], [9.4662389, 35.203145],
    [9.4667255, 35.202704], [9.4683269, 35.2010328], [9.4690576, 35.200281],
    [9.47002, 35.1995773], [9.4719649, 35.1983612], [9.472022, 35.1983104],
    [9.4724071, 35.1979678], [9.4729183, 35.1975025], [9.4736586, 35.196848],
    [9.4745026, 35.1963235], [9.4745855, 35.1962872], [9.476889, 35.1948733],
    [9.4769962, 35.1947922], [9.4773739, 35.1945065], [9.4787405, 35.1934731],
    [9.4795498, 35.192796], [9.4803123, 35.192087], [9.4803648, 35.1920396],
    [9.4814345, 35.1910735], [9.4824624, 35.190098], [9.4836578, 35.1889629],
    [9.4849066, 35.1871547], [9.4856267, 35.1857294], [9.5047182, 35.1655477],
    [9.5048095, 35.1651254], [9.5230884, 35.110662], [9.5251302, 35.0947761],
    [9.5178113, 35.0870148], [9.5172663, 35.0845244], [9.5158589, 35.0655796],
    [9.5182106, 35.0575979], [9.5320712, 35.0328532], [9.5339702, 35.0190183],
    [9.5333791, 35.0185827], [9.531311, 35.017012], [9.5276473, 35.0117083],
    [9.5272491, 35.0104344], [9.526732, 35.0071756], [9.5265192, 35.0051378],
    [9.5264661, 35.0047535], [9.526395, 35.0039703], [9.5263488, 35.0034606],
    [9.5250598, 35.0006041], [9.5567111, 34.9886437], [9.5565446, 34.9806536],
    [9.5571198, 34.978814], [9.5587472, 34.9733621], [9.5594525, 34.9710843],
    [9.5607484, 34.968823], [9.562574, 34.9669518], [9.5562247, 34.9435631],
    [9.515382, 34.9074875], [9.5074909, 34.8933817], [9.4972406, 34.8739423],
    [9.5048553, 34.8380334], [9.5054499, 34.8304584], [9.3938485, 34.7489432],
    [9.3922458, 34.7136469], [9.388613, 34.7068766], [9.3884658, 34.7065612],
    [9.3882075, 34.7060075], [9.3880401, 34.705559], [9.3881157, 34.7048859],
    [9.4033743, 34.6354519], [9.3978615, 34.624303], [9.3962743, 34.6237034],
    [9.3943367, 34.6229977], [9.3939981, 34.6228786], [9.3930888, 34.6225588],
    [9.3922152, 34.6222452], [9.3903469, 34.6214365], [9.389095, 34.6208463],
    [9.3886859, 34.6206963], [9.3886047, 34.6206665], [9.3872334, 34.6203942],
    [9.3859542, 34.620282], [9.3859349, 34.6202273], [9.3857814, 34.620269],
    [9.3853494, 34.6201287], [9.384899, 34.6200673], [9.3828166, 34.6197678],
    [9.3826671, 34.6197414], [9.3792867, 34.6181575], [9.3526498, 34.5634427],
    [9.3525546, 34.563278], [9.3521228, 34.5624787], [9.3520213, 34.5622861],
    [9.3511175, 34.5605743], [9.3462137, 34.5529193], [9.3449121, 34.5502545],
    [9.3446992, 34.5487028], [9.344686, 34.5486063], [9.3439342, 34.5436737],
    [9.3436003, 34.5408215], [9.3452391, 34.5360052], [9.3462905, 34.5345175],
    [9.3462684, 34.5339718], [9.346521, 34.5331278], [9.3467905, 34.5329661],
    [9.347028, 34.5318786], [9.3472105, 34.5314998], [9.3472668, 34.5312639],
    [9.3476277, 34.5310898], [9.3484355, 34.5318488]
]

final_route = get_full_route(path_geom)
# Format the final route as WKT strings: 'POINT(<latitude> <longitude>)'
formatted_route = [f"POINT({lon} {lat})" for lat, lon in final_route]
print(f"Final Route: {formatted_route}")
